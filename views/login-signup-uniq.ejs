<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>UNIQ-ID ‚Äî Sign up / Login</title>

  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">

  <style>
    :root{
      --accent-1:#d1410c;
      --accent-2:#e86b2b;
      --bg:#fff8f0;
      --card:#fff3e6;
      --muted:#666;
      --glass: rgba(255,255,255,0.85);
      --success: #0a7b2b;
      --danger: #9b1c1c;
    }
    *{box-sizing:border-box}
    body{font-family:'Poppins',sans-serif;background:linear-gradient(180deg,#fffefc,#fff8f0);margin:0;padding:28px;color:#222}
    .wrap{max-width:1100px;margin:20px auto;background:transparent;display:grid;grid-template-columns:1fr 520px;gap:28px;align-items:start}
    .info{padding:28px;background:var(--card);border-radius:14px;box-shadow:0 12px 30px rgba(0,0,0,0.06)}
    .info h1{margin:0 0 10px;color:var(--accent-1)}
    .info p{color:var(--muted)}
    .panel{background:var(--glass);padding:18px;border-radius:14px;backdrop-filter: blur(6px);box-shadow:0 12px 30px rgba(0,0,0,0.06)}
    .tabs{display:flex;gap:8px;margin-bottom:12px}
    .tab{flex:1;padding:10px 12px;border-radius:10px;text-align:center;cursor:pointer;font-weight:700;border:1px solid rgba(0,0,0,0.05);background:#fff}
    .tab.active{background:linear-gradient(90deg,var(--accent-1),var(--accent-2));color:white;box-shadow:0 6px 18px rgba(0,0,0,0.08)}
    form{display:flex;flex-direction:column;gap:10px}
    label{font-size:0.9rem;color:#333}
    input[type="text"], input[type="email"], input[type="password"]{
      padding:10px;border-radius:8px;border:1px solid #ddd;font-size:1rem;outline:none;
    }
    .uniq-row{display:flex;gap:8px;align-items:center}
    .uniq-prefix{font-weight:800;padding:10px 12px;border-radius:8px;background:#fff;border:1px solid #ddd}
    .digit-boxes{display:flex;gap:8px}
    .digit-box{width:44px;height:48px;border-radius:8px;border:1px solid #ddd;display:flex;align-items:center;justify-content:center;font-size:1.15rem;font-weight:700;background:white}
    .digit-box input{width:100%;height:100%;border:0;text-align:center;font-size:1.15rem;font-weight:700;outline:none}
    .small{font-size:0.9rem;color:var(--muted)}
    .hint{font-size:0.85rem;color:#444;margin-top:6px}
    .btn{padding:12px;border-radius:10px;border:0;font-weight:800;cursor:pointer}
    .btn.primary{background:var(--accent-2);color:white}
    .btn.ghost{background:#f3f3f3;color:#333}
    .msg{padding:10px;border-radius:8px;margin-top:8px;font-weight:600}
    .msg.error{background:#ffe9e9;color:var(--danger)}
    .msg.success{background:#eaf9ee;color:var(--success)}
    .controls{display:flex;gap:8px;align-items:center}
    .eye-toggle{cursor:pointer;padding:8px;border-radius:8px;background:#f6f6f6;border:1px solid #eee}
    .progress { margin-top:12px; display:flex; gap:8px; align-items:center; }
    .step {
      flex:1;padding:8px;border-radius:8px;background:#fff;border:1px solid #eee;font-size:0.85rem;text-align:center;color:#666;
    }
    .step.active { background: linear-gradient(90deg,var(--accent-1),var(--accent-2)); color: white; font-weight:700; box-shadow:0 8px 20px rgba(0,0,0,0.08) }
    .console {
      margin-top:14px;padding:12px;border-radius:8px;background:#0f1724;color:#e6eef8;font-family:monospace;font-size:0.9rem;min-height:80px;overflow:auto;
      box-shadow: inset 0 -8px 40px rgba(0,0,0,0.12)
    }
    .console .line { margin-bottom:6px; white-space:pre-wrap }
    .console .ok { color:#b7f5c3 }
    .console .warn { color:#fbd38d }
    .console .err { color:#ffb4b4 }
    .meta { color:var(--muted); font-size:0.9rem; margin-top:8px }
    @media(max-width:980px){ .wrap{grid-template-columns:1fr; padding:12px} .digit-box{width:40px;height:44px} .panel{padding:12px} }
  </style>
</head>
<body>
  <div class="wrap">
    <div class="info">
      <h1>UNIQ-ID Authentication</h1>
      <p>Sign up or log in using your UNIQ-ID. We verify the Poseidon leaf on-chain ‚Äî your DeKey and e-mail are <strong>not stored</strong> in the public site DB (we only keep UNIQ-ID, username & timestamp).</p>
      <ul>
        <li class="small">Sign up: enter your UNIQ-ID, email & DeKey and pick a username. Server verifies on-chain and registers your UNIQ username.</li>
        <li class="small">Log in: re-verify your UNIQ-ID, email & DeKey and you'll be logged in without raw secrets being stored.</li>
      </ul>
      <div class="meta">If you previously used Google sign-in on this site, use the Google route instead.</div>
    </div>

    <div class="panel" id="uniqPanel">
      <div class="tabs" role="tablist">
        <div class="tab active" id="tabSignup" role="tab" aria-selected="true">Sign up</div>
        <div class="tab" id="tabLogin" role="tab" aria-selected="false">Log in</div>
      </div>

      <!-- SIGNUP -->
      <div id="signupForm">
        <form id="formSignup" onsubmit="return false;">
          <label>UNIQ-ID (enter digits only)</label>
          <div class="uniq-row">
            <div class="uniq-prefix">UNIQ-</div>
            <div class="digit-boxes" id="signup-digit-boxes" aria-label="UNIQ digits (6)">
              <div class="digit-box"><input inputmode="numeric" pattern="[0-9]" maxlength="1" class="digit-input" data-pos="0"></div>
              <div class="digit-box"><input inputmode="numeric" pattern="[0-9]" maxlength="1" class="digit-input" data-pos="1"></div>
              <div class="digit-box"><input inputmode="numeric" pattern="[0-9]" maxlength="1" class="digit-input" data-pos="2"></div>
              <div class="digit-box"><input inputmode="numeric" pattern="[0-9]" maxlength="1" class="digit-input" data-pos="3"></div>
              <div class="digit-box"><input inputmode="numeric" pattern="[0-9]" maxlength="1" class="digit-input" data-pos="4"></div>
              <div class="digit-box"><input inputmode="numeric" pattern="[0-9]" maxlength="1" class="digit-input" data-pos="5"></div>
            </div>
          </div>

          <label>Email</label>
          <input id="su_email" type="email" name="email" placeholder="you@example.com" required>

          <label>DeKey (max 16 chars)</label>
          <div style="display:flex;gap:8px;align-items:center">
            <input id="su_dekey" type="password" name="dekey" placeholder="Your secret DeKey" maxlength="16" style="flex:1" required>
            <button id="su_eye" type="button" class="eye-toggle" title="Show / hide DeKey">üëÅ</button>
          </div>
          <div class="hint">16 characters max. Keep it secret.</div>

          <label>Choose username (public)</label>
          <input id="su_username" name="username" placeholder="pick a username" minlength="3" required>

          <div class="controls">
            <button class="btn primary" id="btnSignup" type="button">Continue ‚Äî Sign up</button>
            <button class="btn ghost" id="btnClearSignup" type="button">Clear</button>
          </div>

          <div class="progress" aria-hidden="true" id="signup-steps" style="display:none;">
            <div class="step" data-step="0">Start</div>
            <div class="step" data-step="1">Hashing</div>
            <div class="step" data-step="2">Combine</div>
            <div class="step" data-step="3">Querying chain</div>
            <div class="step" data-step="4">Result</div>
          </div>

          <div class="console" id="signup-console" style="display:none;"></div>
          <div id="signupMsg" class="msg" style="display:none"></div>
        </form>
      </div>

      <!-- LOGIN -->
      <div id="loginForm" style="display:none">
        <form id="formLogin" onsubmit="return false;">
          <label>UNIQ-ID (enter digits only)</label>
          <div class="uniq-row">
            <div class="uniq-prefix">UNIQ-</div>
            <div class="digit-boxes" id="login-digit-boxes" aria-label="UNIQ digits (6)">
              <div class="digit-box"><input inputmode="numeric" pattern="[0-9]" maxlength="1" class="digit-input" data-pos="0"></div>
              <div class="digit-box"><input inputmode="numeric" pattern="[0-9]" maxlength="1" class="digit-input" data-pos="1"></div>
              <div class="digit-box"><input inputmode="numeric" pattern="[0-9]" maxlength="1" class="digit-input" data-pos="2"></div>
              <div class="digit-box"><input inputmode="numeric" pattern="[0-9]" maxlength="1" class="digit-input" data-pos="3"></div>
              <div class="digit-box"><input inputmode="numeric" pattern="[0-9]" maxlength="1" class="digit-input" data-pos="4"></div>
              <div class="digit-box"><input inputmode="numeric" pattern="[0-9]" maxlength="1" class="digit-input" data-pos="5"></div>
            </div>
          </div>

          <label>Email</label>
          <input id="li_email" type="email" name="email" placeholder="you@example.com" required>

          <label>DeKey (max 16 chars)</label>
          <div style="display:flex;gap:8px;align-items:center">
            <input id="li_dekey" type="password" name="dekey" placeholder="Your DeKey" maxlength="16" style="flex:1" required>
            <button id="li_eye" type="button" class="eye-toggle" title="Show / hide DeKey">üëÅ</button>
          </div>
          <div class="hint">16 characters max.</div>

          <div class="controls">
            <button class="btn primary" id="btnLogin" type="button">Continue ‚Äî Log in</button>
            <button class="btn ghost" id="btnClearLogin" type="button">Clear</button>
          </div>

          <div class="progress" aria-hidden="true" id="login-steps" style="display:none;">
            <div class="step" data-step="0">Start</div>
            <div class="step" data-step="1">Hashing</div>
            <div class="step" data-step="2">Combine</div>
            <div class="step" data-step="3">Querying chain</div>
            <div class="step" data-step="4">Result</div>
          </div>

          <div class="console" id="login-console" style="display:none;"></div>
          <div id="loginMsg" class="msg" style="display:none"></div>
        </form>
      </div>
    </div>
  </div>

<script>
/* ---------- Tabs ---------- */
const tabSignup = document.getElementById('tabSignup');
const tabLogin = document.getElementById('tabLogin');
const signupForm = document.getElementById('signupForm');
const loginForm = document.getElementById('loginForm');

tabSignup.onclick = () => {
  tabSignup.classList.add('active');
  tabLogin.classList.remove('active');
  signupForm.style.display = '';
  loginForm.style.display = 'none';
};
tabLogin.onclick = () => {
  tabLogin.classList.add('active');
  tabSignup.classList.remove('active');
  loginForm.style.display = '';
  signupForm.style.display = 'none';
};

/* ---------- Utilities ---------- */
function showMsg(el, text, type='error') {
  el.style.display = 'block';
  el.className = 'msg ' + (type === 'success' ? 'success' : 'error');
  el.textContent = text;
}
function clearMsg(el) { el.style.display = 'none'; el.textContent=''; }
function disableControls(list, val=true){
  list.forEach(el=> el.disabled = val);
}
function scrollConsoleToBottom(el){ el.scrollTop = el.scrollHeight; }

/* ---------- DIGIT BOX UX (shared) ---------- */
function setupDigits(containerId){
  const container = document.getElementById(containerId);
  const inputs = Array.from(container.querySelectorAll('.digit-input'));
  inputs.forEach((inp, idx) => {
    inp.addEventListener('input', (e) => {
      const v = e.target.value.replace(/[^0-9]/g,'').slice(0,1);
      e.target.value = v;
      if (v && idx < inputs.length -1) inputs[idx+1].focus();
    });
    inp.addEventListener('keydown', (e) => {
      if (e.key === 'Backspace') {
        if (e.target.value === '' && idx > 0) {
          inputs[idx-1].focus();
          inputs[idx-1].select();
        }
      } else if (e.key === 'ArrowLeft' && idx > 0) {
        inputs[idx-1].focus();
      } else if (e.key === 'ArrowRight' && idx < inputs.length -1) {
        inputs[idx+1].focus();
      } else {
        // allow digits only
        if (e.key.length === 1 && !/[0-9]/.test(e.key)) {
          e.preventDefault();
        }
      }
    });
    // paste support (if user pastes 6-digit string)
    inp.addEventListener('paste', (e) => {
      const paste = (e.clipboardData || window.clipboardData).getData('text');
      const digits = paste.replace(/\D/g,'').slice(0, inputs.length);
      if (digits.length) {
        e.preventDefault();
        for (let i=0;i<inputs.length;i++){
          inputs[i].value = digits[i] || '';
        }
        const next = Math.min(digits.length, inputs.length-1);
        inputs[next].focus();
      }
    });
  });
}
setupDigits('signup-digit-boxes');
setupDigits('login-digit-boxes');

function collectDigits(containerId){
  const container = document.getElementById(containerId);
  return Array.from(container.querySelectorAll('.digit-input')).map(i => i.value || '').join('');
}

/* ---------- Eye toggle for DeKey ---------- */
function setupEye(btnId, inputId){
  const btn = document.getElementById(btnId);
  const input = document.getElementById(inputId);
  btn.addEventListener('click', ()=> {
    if (input.type === 'password') {
      input.type = 'text';
      btn.textContent = 'üôà';
      btn.title = 'Hide DeKey';
    } else {
      input.type = 'password';
      btn.textContent = 'üëÅ';
      btn.title = 'Show DeKey';
    }
  });
}
setupEye('su_eye','su_dekey');
setupEye('li_eye','li_dekey');

/* ---------- Progress & Console helpers ---------- */
function showConsole(consoleEl, stepsEl){
  consoleEl.style.display = '';
  stepsEl.style.display = 'flex';
  // reset steps
  Array.from(stepsEl.querySelectorAll('.step')).forEach(s => s.classList.remove('active'));
  consoleEl.innerHTML = '';
}
function pushConsoleLine(consoleEl, text, klass='') {
  const line = document.createElement('div');
  line.className = 'line ' + (klass||'');
  line.textContent = text;
  consoleEl.appendChild(line);
  scrollConsoleToBottom(consoleEl);
}
function setStepActive(stepsEl, idx){
  const steps = Array.from(stepsEl.querySelectorAll('.step'));
  steps.forEach(s => s.classList.remove('active'));
  if (steps[idx]) steps[idx].classList.add('active');
}

/* ---------- SIGNUP FLOW ---------- */
const btnSignup = document.getElementById('btnSignup');
const btnClearSignup = document.getElementById('btnClearSignup');
const signupConsole = document.getElementById('signup-console');
const signupSteps = document.getElementById('signup-steps');
const signupMsg = document.getElementById('signupMsg');

btnClearSignup.addEventListener('click', ()=> {
  document.getElementById('su_email').value='';
  document.getElementById('su_dekey').value='';
  document.getElementById('su_username').value='';
  Array.from(document.querySelectorAll('#signup-digit-boxes .digit-input')).forEach(i=>i.value='');
  clearMsg(signupMsg);
  signupConsole.style.display='none';
  signupSteps.style.display='none';
});

btnSignup.addEventListener('click', async () => {
  clearMsg(signupMsg);
  signupConsole.style.display='none';
  signupSteps.style.display='none';

  const digits = collectDigits('signup-digit-boxes');
  if (digits.length !== 6) { showMsg(signupMsg, 'Enter the full 6-digit UNIQ suffix', 'error'); return; }
  const uniq = `UNIQ-${digits}`;
  const email = (document.getElementById('su_email').value||'').trim();
  const dekey = (document.getElementById('su_dekey').value||'').trim();
  const username = (document.getElementById('su_username').value||'').trim();

  if (!email.includes('@')) { showMsg(signupMsg, 'Enter a valid email', 'error'); return; }
  if (!dekey || dekey.length < 6) { showMsg(signupMsg, 'DeKey must be at least 6 characters', 'error'); return; }
  if (dekey.length > 16) { showMsg(signupMsg, 'DeKey must be at most 16 characters', 'error'); return; }
  if (username.length < 3) { showMsg(signupMsg, 'Choose a username (min 3 chars)', 'error'); return; }

  // UI: show progress console
  showConsole(signupConsole, signupSteps);
  pushConsoleLine(signupConsole, 'üöÄ Starting UNIQ-ID verification', 'ok');
  setStepActive(signupSteps, 0);

  // Simulate step progression while server runs
  let stepIdx = 0;
  const stepTimer = setInterval(()=> {
    stepIdx = Math.min(stepIdx+1, 3);
    setStepActive(signupSteps, stepIdx);
    if (stepIdx === 1) pushConsoleLine(signupConsole, 'üîë Hashing email and paraphrase...', 'ok');
    else if (stepIdx === 2) pushConsoleLine(signupConsole, '‚ö° Combining Poseidon fields to produce leaf...', 'ok');
    else if (stepIdx === 3) pushConsoleLine(signupConsole, `üåê Querying contract.rootToId for: (waiting...)`, 'warn');
  }, 600);

  // disable controls
  disableControls([btnSignup, btnClearSignup], true);

  try {
    const res = await fetch('/api/uniq/signup', {
      method: 'POST',
      headers: {'Content-Type':'application/json'},
      body: JSON.stringify({ uniqId: uniq, email, deKey: dekey, username })
    });

    clearInterval(stepTimer); // stop simulated progression
    setStepActive(signupSteps, 3);

    // attempt to parse JSON
    let data;
    try { data = await res.json(); } catch (e) {
      const text = await res.text();
      showMsg(signupMsg, text || 'Signup failed', 'error');
      pushConsoleLine(signupConsole, '‚ùå Server returned an error: ' + (text || res.statusText), 'err');
      disableControls([btnSignup, btnClearSignup], false);
      return;
    }

    if (!res.ok || data.error) {
      const reason = data.error || (data.message) || 'Verification failed';
      pushConsoleLine(signupConsole, '‚ùå Verification Failed: ' + reason, 'err');
      showMsg(signupMsg, reason, 'error');
      setStepActive(signupSteps, 4);
      return;
    }

    // success
    pushConsoleLine(signupConsole, `‚úÖ Root exists. Assigned ID: ${data.uniqId || data.uniqId || data.uniq_string || (data.uniqId || '')}`, 'ok');
    pushConsoleLine(signupConsole, 'üéâ Verification Success!', 'ok');
    showMsg(signupMsg, 'Signup success ‚Äî redirecting to UNIQ dashboard...', 'success');

    // final step active
    setStepActive(signupSteps, 4);

    // short delay then redirect to uniq-dashboard
    setTimeout(()=> window.location.href = '/uniq-dashboard', 900);

  } catch (err) {
    clearInterval(stepTimer);
    pushConsoleLine(signupConsole, '‚ùå Network/server error: ' + (err && err.message ? err.message : String(err)), 'err');
    showMsg(signupMsg, 'Network/server error', 'error');
  } finally {
    disableControls([btnSignup, btnClearSignup], false);
  }
});

/* ---------- LOGIN FLOW ---------- */
const btnLogin = document.getElementById('btnLogin');
const btnClearLogin = document.getElementById('btnClearLogin');
const loginConsole = document.getElementById('login-console');
const loginSteps = document.getElementById('login-steps');
const loginMsg = document.getElementById('loginMsg');

btnClearLogin.addEventListener('click', ()=> {
  document.getElementById('li_email').value='';
  document.getElementById('li_dekey').value='';
  Array.from(document.querySelectorAll('#login-digit-boxes .digit-input')).forEach(i=>i.value='');
  clearMsg(loginMsg);
  loginConsole.style.display='none';
  loginSteps.style.display='none';
});

btnLogin.addEventListener('click', async () => {
  clearMsg(loginMsg);
  loginConsole.style.display='none';
  loginSteps.style.display='none';

  const digits = collectDigits('login-digit-boxes');
  if (digits.length !== 6) { showMsg(loginMsg, 'Enter the full 6-digit UNIQ suffix', 'error'); return; }
  const uniq = `UNIQ-${digits}`;
  const email = (document.getElementById('li_email').value||'').trim();
  const dekey = (document.getElementById('li_dekey').value||'').trim();

  if (!email.includes('@')) { showMsg(loginMsg, 'Enter a valid email', 'error'); return; }
  if (!dekey || dekey.length < 6) { showMsg(loginMsg, 'DeKey must be at least 6 characters', 'error'); return; }
  if (dekey.length > 16) { showMsg(loginMsg, 'DeKey must be at most 16 characters', 'error'); return; }

  showConsole(loginConsole, loginSteps);
  pushConsoleLine(loginConsole, 'üöÄ Starting UNIQ-ID verification', 'ok');
  setStepActive(loginSteps, 0);

  // simulate progression
  let stepIdx = 0;
  const stepTimer = setInterval(()=> {
    stepIdx = Math.min(stepIdx+1, 3);
    setStepActive(loginSteps, stepIdx);
    if (stepIdx === 1) pushConsoleLine(loginConsole, 'üîë Hashing email and paraphrase...', 'ok');
    else if (stepIdx === 2) pushConsoleLine(loginConsole, '‚ö° Combining Poseidon fields to produce leaf...', 'ok');
    else if (stepIdx === 3) pushConsoleLine(loginConsole, `üåê Querying contract.rootToId for: (waiting...)`, 'warn');
  }, 600);

  disableControls([btnLogin, btnClearLogin], true);

  try {
    const res = await fetch('/api/uniq/login', {
      method:'POST', headers:{'Content-Type':'application/json'},
      body: JSON.stringify({ uniqId: uniq, email, deKey: dekey })
    });

    clearInterval(stepTimer);
    setStepActive(loginSteps, 3);

    let data;
    try { data = await res.json(); } catch (e) {
      const text = await res.text();
      pushConsoleLine(loginConsole, '‚ùå Server returned an error: ' + (text || res.statusText), 'err');
      showMsg(loginMsg, text || 'Login failed', 'error');
      disableControls([btnLogin, btnClearLogin], false);
      return;
    }

    if (!res.ok || data.error) {
      const reason = data.error || data.message || 'Verification failed';
      pushConsoleLine(loginConsole, '‚ùå Verification Failed: ' + reason, 'err');
      showMsg(loginMsg, reason, 'error');
      setStepActive(loginSteps, 4);
      return;
    }

    // success
    pushConsoleLine(loginConsole, `‚úÖ Root exists. On-chain assigned ID: ${data.uniqId || data.uniqId || data.uniq_string || ''}`, 'ok');
    pushConsoleLine(loginConsole, 'üéâ Verification Success!', 'ok');
    showMsg(loginMsg, 'Login success ‚Äî redirecting to UNIQ dashboard...', 'success');
    setStepActive(loginSteps, 4);

    setTimeout(()=> window.location.href = '/uniq-dashboard', 700);

  } catch (err) {
    clearInterval(stepTimer);
    pushConsoleLine(loginConsole, '‚ùå Network/server error: ' + (err && err.message ? err.message : String(err)), 'err');
    showMsg(loginMsg, 'Network/server error', 'error');
  } finally {
    disableControls([btnLogin, btnClearLogin], false);
  }
});

/* ---------- Accessibility: autofocus first digit on load ---------- */
window.addEventListener('load', () => {
  const firstSignup = document.querySelector('#signup-digit-boxes .digit-input');
  const firstLogin = document.querySelector('#login-digit-boxes .digit-input');
  if (firstSignup) firstSignup.focus();
});
</script>
</body>
</html>
 